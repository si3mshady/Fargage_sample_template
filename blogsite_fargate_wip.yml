AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ecs_deployments
  SAM Template for ecs_deployments


Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: blogsite-ecs-cluster-iac

  BlogALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '90'
      IpAddressType: ipv4     
      Name: blog-alb   
      SecurityGroups: 
        - sg-0d3c4a1e0483d6cbb  #allports 
      Subnets: 
        - subnet-0ddf564ecf0eb4382     #us-east-1a  10.0.1.16/28
        - subnet-08af412d87deaa7c3 #us-east-1f 10.0.0.0/24
      Type: application


  blogApiMongoDBTaskDef:
    Type: AWS::ECS::TaskDefinition            
    Properties:             
      ExecutionRoleArn:  !Ref EcsExecRole
      TaskRoleArn: !Ref ContainerTaskRole
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      
      ContainerDefinitions:
        - Name: blogAPI
          Essential: 'true'
          Image: "si3mshady/blogbe-with-healthcheck:2"
          Cpu: 256
          Memory : 512
          PortMappings: 
            - ContainerPort: 5000             
              HostPort: 5000
              Protocol: tcp  

        - Name: mongoDB
          Essential: 'true'
          Image: "mongo:latest"
          Cpu: 256
          Memory : 512
          PortMappings: 
            - ContainerPort: 27017             
              HostPort: 27017
              Protocol: tcp                    

      RequiresCompatibilities:
        - "FARGATE"

  frontEndTaskDefinition:
    Type: AWS::ECS::TaskDefinition            
    Properties:             
      ExecutionRoleArn:  !Ref EcsExecRole
      TaskRoleArn: !Ref ContainerTaskRole
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      
      ContainerDefinitions:
        - Name: frontend
          Essential: 'true'
          Image: "si3mshady/blogfe-dev-no-proxy-config:1"
          Cpu: 256
          Memory : 512
          PortMappings: 
            - ContainerPort: 3000             
              HostPort: 3000
              Protocol: tcp        

      RequiresCompatibilities:
        - "FARGATE"
                        
  frontEndService:
    Type: AWS::ECS::Service
    DependsOn: FrontEndRule
    Properties:
      ServiceName: frontsvc
      LoadBalancers:       
        - ContainerPort: 3000
          ContainerName: frontend
          TargetGroupArn: !Ref TGFE
      
      Cluster: 
        Ref: EcsCluster
      TaskDefinition: !Ref frontEndTaskDefinition
   
      LaunchType:  FARGATE  #FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-0ddf564ecf0eb4382 
          SecurityGroups:
            - sg-0d3c4a1e0483d6cbb


  blogApindMongoService:
    Type: AWS::ECS::Service
    DependsOn: BackendRule
    Properties:
      ServiceName: blogApiAndMongoService
      LoadBalancers:
        - ContainerPort: 5000
          ContainerName: blogAPI
          TargetGroupArn: !Ref TGNM

      Cluster: 
        Ref: EcsCluster
      TaskDefinition: !Ref blogApiMongoDBTaskDef  
      LaunchType:  FARGATE  #FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-0ddf564ecf0eb4382 
          SecurityGroups:
            - sg-0d3c4a1e0483d6cbb

  EcsExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EcsExecRoleBlogsite
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  
  ContainerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ContainerTaskRoleBlogsite
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
 
  TGFE:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetType: ip
        Name: tgFrontEnd
        Port: 3000
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId: vpc-08800efcf5192efa9


  TGNM:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: nodeAndMongo
      Port: 5000
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: vpc-08800efcf5192efa9
        

  FrontEndListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref  TGFE
      LoadBalancerArn: !Ref BlogALB
      Port: '3000'
      Protocol: HTTP


  NodeAndMongoListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref  TGNM
      LoadBalancerArn: !Ref BlogALB
      Port: '5000'
      Protocol: HTTP

  FrontEndRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
         - TargetGroupArn: !Ref TGFE
           Type: 'forward'
      Conditions: 
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref FrontEndListener
      Priority: 1
      
  
  BackendRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
          - TargetGroupArn: !Ref  TGNM
            Type: 'forward'
      Conditions: 
        - Field: path-pattern
          Values: 
            - '*'
      ListenerArn: !Ref  NodeAndMongoListener
      Priority: 1





              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html#cfn-elasticloadbalancingv2-targetgroup-name
              # https://stackoverflow.com/questions/53971873/the-target-group-does-not-have-an-associated-load-balancer
